# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore
.DS_Store
.idea/*
.qoder/*

## User settings
xcuserdata/

## Compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## Compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Xcode Patch
*.xcodeproj/*
!*.xcodeproj/project.pbxproj
!*.xcodeproj/xcshareddata/
!*.xcodeproj/project.xcworkspace/
*.xcodeproj/project.xcworkspace/*
!*.xcodeproj/project.xcworkspace/contents.xcworkspacedata
!*.xcodeproj/project.xcworkspace/xcshareddata/

## Xcode Workspace
*.xcworkspace/xcuserdata/
*.xcworkspace/xcshareddata/UserInterfaceState.xcuserstate

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
# .swiftpm

.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# SwiftLint
.swiftlint.yml.bak

# Swift Package Manager Build
.swiftpm/
Package.resolved

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# Simulator and Device Support
**/*.app.dSYM.zip
**/*.app.dSYM

# Provisioning profiles
*.mobileprovision
*.provisionprofile

# App Store Connect API Key
AuthKey_*.p8

# Certificate files
*.cer
*.p12
*.p8

# Backup files
*.backup
*.bak
*~.nib

# Log files
*.log

# Temporary files
*.tmp
*.temp

# SwiftData and Core Data
*.sqlite
*.sqlite-shm
*.sqlite-wal

# Environment variables and secrets
.env
.env.local
.env.development
.env.production
secrets.plist
GoogleService-Info.plist

# Documentation generated files
docs/generated/
*.docset

# Backup of original SwiftLint configuration
.swiftlint.yml.orig

# CI/CD temporary files
.github/workflows/*.tmp

# Archive files
*.ipa
*.dSYM.zip

# Instruments files
*.trace

# Playgrounds
timeline.xctimeline
playground.xcworkspace

# Build artifacts specific to project
SafeDriverNote/Build/
SafeDriverNote/DerivedData/

# Backup of project files
*.pbxproj.bak
*.xcscheme.bak

# Local development files
local.properties
development.xcconfig